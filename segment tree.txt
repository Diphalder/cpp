#define mx 100001
lld arr[mx];
lld tree[mx * 3];
void init(lld node, lld low, lld hi)
{
    if (low == hi) {
        tree[node] = arr[hi];
        return;
    }
    lld Left = node * 2;
    lld Right = node * 2 + 1;
    lld mid = (low + hi) / 2;
    init(Left, low, mid);
    init(Right, mid + 1, hi);
    tree[node] = tree[Left] + tree[Right];
}
lld query(lld node, lld low, lld hi, lld i, lld j)
{
    if (i > hi || j <low)
        return 0;
    if (low >= i && hi<= j)
        return tree[node];
    lld Left = node * 2;
    lld Right = node * 2 + 1;
    lld mid = (low + hi) / 2;
    lld p1 = query(Left, low, mid, i, j);
    lld p2 = query(Right, mid + 1, hi, i, j);
    return p1 + p2;
}
void update(lld node, lld low, lld hi, lld i, lld newvalue)
{
    if (i > hi || i < low)
        return;
    if (low >= i && hi <= i) {
        tree[node] = newvalue;
        return;
    }
    lld Left = node * 2;
    lld Right = node * 2 + 1;
    lld mid = (low + hi) / 2;
    update(Left, low, mid, i, newvalue);
    update(Right, mid + 1, hi, i, newvalue);
    tree[node] = tree[Left] + tree[Right];
}


indexing 1-n
node arr [1,n]
lld query(1,1,n, i, j)
void update(1,1,n,i,newvalue)

