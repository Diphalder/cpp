#define mx 100001
int arr[mx];
class info {
    public:
    lld prop=0,sum=0;
} tree[mx * 3];


void init(lld node, lld b, lld e)
{
    if (b == e) {
        tree[node].sum = arr[b];
        return;
    }
    lld Left = node * 2;
    lld Right = node * 2 + 1;
    lld mid = (b + e) / 2;
    init(Left, b, mid);
    init(Right, mid + 1, e);
    tree[node].sum = tree[Left].sum + tree[Right].sum;
}
void update(lld node, lld b, lld e, lld i, lld j, lld x)
{
    if (i > e || j < b)
        return;
    if (b >= i && e <= j)
    {
        tree[node].sum += ((e - b + 1) * x);
        tree[node].prop += x;
        return;
    }
    lld Left = node * 2;
    lld Right = (node * 2) + 1;
    lld mid = (b + e) / 2;
    update(Left, b, mid, i, j, x);
    update(Right, mid + 1, e, i, j, x);
    tree[node].sum = tree[Left].sum + tree[Right].sum + (e - b + 1) * tree[node].prop;

}

lld query(lld node,lld b, lld e, lld i, lld j, lld carry = 0)
{
    if (i > e || j < b)
        return 0;

    if (b >= i and e <= j)
        return tree[node].sum + carry * (e - b + 1);

    lld Left = node << 1;
    lld Right = (node << 1) + 1;
    lld mid = (b + e) >> 1;

    lld p1 = query(Left, b, mid, i, j, carry + tree[node].prop);
    lld p2 = query(Right, mid + 1, e, i, j, carry + tree[node].prop);

    return p1 + p2;
}