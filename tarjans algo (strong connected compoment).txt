const lld mx = 30;
lld n;
vector<lld> adj[mx];
bool visited[mx];
lld dfs_low[mx];
lld foundAt[mx];
lld gt = 0;
stack<lld> st;

vector < vector <lld> >compo;

void dfsTarjan(lld u)
{
    visited[u] = 1;
    dfs_low[u] = foundAt[u] = gt++;
    st.push(u);

    for (lld v : adj[u])
    {
        if (foundAt[v]== -1)
        {
            dfsTarjan(v);
        }
        if (visited[v])   // on stack
        {
            dfs_low[u] = min(dfs_low[u], dfs_low[v]);
        }
    }

    if (dfs_low[u] == foundAt[u])
    {
        vector<lld>c;
        while (!st.empty())
        {
            lld v = st.top();
            st.pop();
            visited[v] = 0;
            c.pb(v);
            if (v == u) break;
        }
        compo.pb(c);
    }
}

void tarjanSCC()
{
    compo.clear();
    mem(visited,false);
    mem(dfs_low,-1);
    mem(foundAt,-1);
    gt = 0;


    loop(1,n)
    {
        if (foundAt[i] == -1)
        {
            dfsTarjan(i);
        }
    }
}

//#################




 loopN(compo.size())
        {
            loopN2(compo[i].size())
            {
                cout<<compo[i][j]<<" ";
           

            }
            cout<<endl;

        }
