#include<bits/stdc++.h>
using namespace std;

int MAX = 32000;
vector <int > prime;
vector <int > segmentPrime;

void findPrime (int n)
{
    bool a[n+1];
    for( int i=0;i<=n;i++)
    {
        a[i]=1;
    }
    for(int i=2;i*i<=n;i++)
    {
        if(a[i]==1)
        {
            for(int j=i*i;j<=n;j+=i)
            {
                a[j]=0;
            }
        }

    }
    for(int i=2;i<=n;i++)
    {
        if(a[i])
        {
            prime.push_back(i);
        }
    }



}



void segmentSev(int l , int h)
{

   int n=h-l+1;;
    bool a[n];
    for(int i=0;i<n;i++)
    {
        a[i]=1;
    }
    for(  int i=0 ;prime[i]*prime[i]<=h ; i++)
    {
        int base=(l/prime[i])*prime[i];
        if(base<l)
        {
            base+=prime[i];
        }
        for(  int j=base ; j<=h; j+=prime[i])
        {
            a[j-l]=0;

        }


    }
    for( int i=0;i<n;i++)
    {
        if(a[i])
        {
            segmentPrime.push_back(i+l);

        }

    }
    for( int i=0;i<segmentPrime.size();i++)
    {
        cout<<segmentPrime[i]<<" ";

    }
    cout<<endl;


}

int main()
{
    findPrime(MAX);
    int l,h;
    cin>>l>>h;
    segmentSev(l ,h );

    return 0;
}
